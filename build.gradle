import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os
plugins {
    id 'java'
    id 'eclipse'
}

repositories {
    mavenCentral()
}

// fix documentation
eclipse {
    classpath {
        file {
            whenMerged {
                def lib = entries.find { it.path.contains 'starfarer.api.jar' }
                lib.javadocPath = fileReference(file('libs/starfarer.api.zip'))
                lib.sourcePath = fileReference(file('libs/starfarer.api.zip'))
            }
        }
    }
}

// project level config
sourceCompatibility = 1.7
targetCompatibility = 1.7

// build everything and make a jar
build {
    doLast {
        copy {
            from jar
            into '.'
        }
    }
}

// compile time dependencies
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.10'
    implementation group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: '2.9.3'
    implementation group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version: '2.9.3'
    implementation group: 'log4j', name: 'log4j', version: '1.2.9'
    implementation group: 'org.json', name: 'json', version: '20170516'
    implementation group: 'net.java.jinput', name: 'jinput', version: '2.0.7'
    implementation group: 'org.codehaus.janino', name: 'janino', version: '3.0.7'

    // lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    // test only
    testImplementation 'junit:junit:4.12'
}

task release(type: Zip) {
    dependsOn build
    archiveFileName = "${project.name}-${readModInfoJson().version}.zip"
    destinationDirectory = file(rootDir)
    from sourceSets.main.resources
    from jar
    into project.name
}

task copyToMods(type: Copy) {
    if (!arePropertiesDefinedAndPrintWarning()) return
    dependsOn build
    from jar
    into getStarsectorModDir()
}

task runGameWithBuild(type: Exec) {
    if (!arePropertiesDefinedAndPrintWarning()) {
        Os.isFamily(Os.FAMILY_WINDOWS) ? commandLine('cmd', '/c', 'echo "Failed to run task"') : commandLine('echo', 'failed to run task')
        return
    }

    dependsOn copyToMods
    workingDir = getStarsectorExecutableDir()
    Os.isFamily(Os.FAMILY_WINDOWS) ? commandLine('cmd', '/c', 'starsector.bat') : commandLine('sh', './starsector.sh')
}


def readModInfoJson() {
    def jsonFile = file('src/main/resources/mod_info.json')
    def slurper = new JsonSlurper()
    return slurper.parse(jsonFile)
}

def areGradlePropertiesDefined() {
    return (project.hasProperty('game.dir') && project.hasProperty('game.mod_folder'))
}

def arePropertiesDefinedAndPrintWarning() {
    if (areGradlePropertiesDefined()) return true
    println 'WARNING: Missing properties in gradle.properties. See gradle.properties.dist as an example.'
    println 'WARNING: Task execution stopped.'
    return false
}

def getStarsectorModDir() {
    if (!areGradlePropertiesDefined()) return ""
    return project.getProperty('game.dir') + project.getProperty('game.mod_folder') + readModInfoJson().id
}

def getStarsectorExecutableDir() {
    if (!areGradlePropertiesDefined()) return ""
    return Os.isFamily(Os.FAMILY_WINDOWS) ? file(project.getProperty('game.dir') + 'starsector-core') : file(project.getProperty('game.dir'))
}